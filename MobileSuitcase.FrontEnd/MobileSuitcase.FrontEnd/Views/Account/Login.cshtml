@using MobileSuitcase.Entities.ViewModels
@model LoginViewModel
@{
    ViewData["Title"] = "Iniciar sesión";
}

<div class="margin_auto w_50p">
    <div class=" text-center mar_t_20 mar_b_20 ">
        <h4>INICIO DE SESIÓN</h4>
        <h5>Por favor ingrese sus credenciales</h5>
    </div>

    @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, null, new { @class = "needs-validation", novalidate = true }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary("", new { @class = "text_red text-left no_list" })

        <div class="form-group">
            <label for="UserName">Usuario: </label>
            <input type="text" asp-for="UserName" class="form-control" id="UserName" required pattern="^[a-zA-Z0-9._%+-]+@@[A-Za-z0-9.-]+\.[a-zA-Z]{2,3}$" oninvalid="this.setCustomValidity('Este campo es requerido.')" oninput="this.setCustomValidity('')" title="Este campo es requerido." placeholder="Ingrese su correo electrónico" />
            <span class="invalid-feedback">Debe poseer formato de correo.</span>
        </div>

        <div class="form-group">
            <label for="Password">Contraseña:</label>
            <input type="password" asp-for="Password" class="form-control" id="Password" required pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*[\$\^\&\)\(!@@#%*/+=._-])\S{8,16}$" oninvalid = "this.setCustomValidity('Este campo es requerido.')" oninput= "this.setCustomValidity('')" title= "Este campo es requerido." placeholder= "Ingrese su contraseña" />
            <span class="invalid-feedback">La contraseña debe contener de 8 a 12 caracteres incluyendo mayúsculas, minúsculas y símbolos.</span>
        </div>

        <div class="text-center mar_b_20">
            <button type="submit" class="btn btn-primary">Iniciar sesión</button>
        </div>

    }

</div>

@section Scripts{
    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
}